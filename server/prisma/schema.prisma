// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id          Int       @id @default(autoincrement())
  fullName    String    @db.VarChar(50)
  email       String    @unique @db.VarChar(20)
  password    String    @db.VarChar(20)
  phoneNumber String?   @db.VarChar(10)
  picture     String?   
  enabled     Boolean   @default(true)
  role        Role      @default(user)
  createdAt   DateTime  @default(now())
  bookings    Booking[]
  cart        Cart[]
  orders      Order[]
}

model Concert {
  id          Int       @id @default(autoincrement())
  concertName String    @db.VarChar(100)
  venue       String    @db.VarChar(100)
  concertDate DateTime?
  picture     String?
  price       Int
  createdAt   DateTime  @default(now())
  bookings    Booking[]
  seats       Seat[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  description String?   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  description String?     
  price       Int
  stock       Int         @default(0)
  categoryId  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  image       String?     
  category    Category    @relation(fields: [categoryId], references: [id])
  cartItems   Cart[]
  orderItems  OrderItem[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       Int
  concertId    Int
  bookingDate  DateTime @default(now())
  totalTickets Int
  totalAmount  Float
  status       String   @default("Pending")
  user         User     @relation(fields: [userId], references: [id])
  concert      Concert  @relation(fields: [concertId], references: [id])
}

model Seat {
  id         Int     @id @default(autoincrement())
  concertId  Int
  seatNumber String  @db.VarChar(10)
  price      Int
  isBooked   Boolean @default(false)
  concert    Concert @relation(fields: [concertId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    String      @default("Pending")
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
