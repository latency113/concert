// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id          Int       @id @default(autoincrement())
  fullName    String
  email       String    @unique
  password    String
  phoneNumber String?
  picture     String?
  enabled     Boolean   @default(true)
  role        Role      @default(user)
  createdAt   DateTime  @default(now())
  bookings    Booking[]
}

model Concert {
  id             Int       @id @default(autoincrement())
  concertName    String
  venue          String
  concertDate    DateTime
  totalSeats     Int
  availableSeats Int
  createdAt      DateTime  @default(now())
  bookings       Booking[]
  seats          Seat[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  category    Category @relation(fields: [categoryId], references: [id])
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       Int
  concertId    Int
  bookingDate  DateTime @default(now())
  totalTickets Int
  totalAmount  Float
  status       String   @default("Pending")
  user         User     @relation(fields: [userId], references: [id])
  concert      Concert  @relation(fields: [concertId], references: [id])
}

model Seat {
  id         Int     @id @default(autoincrement())
  concertId  Int
  seatNumber String
  price      Int
  isBooked   Boolean @default(false)
  concert    Concert @relation(fields: [concertId], references: [id])
}
